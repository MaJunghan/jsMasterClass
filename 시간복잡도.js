// big O 가 필요한 이유

// 코드를 실행하고, 많은 해결방법중에 어떠한것이
// 더 효울적인지 알 수있다.

// 정확한 초를 재기보다는 컴퓨터가 처리하는 연산개수를
// 세면된다.

// 연산 : 숫자말고 * / + - 이런것들.

function addUpTo(n) {
  return (n * (n + 1)) / 2;
}
// ===> 연산회수 3

// loop의 경우 연산횟수를 일일이 세기가 힘들기때문에
// 추세를봐야함 (큰그림) => n이 커질수록 연산횟수가 많아짐

// 2중 loop의 경우 연산횟수가 급격하게 증가되서 선형보다 더 급한 곡선으로 big o 그래프를 표시할 수 잇음.

// 1. 상수는 뗀다.  2n , 500n  x => O(1), O(n), O(n2)
